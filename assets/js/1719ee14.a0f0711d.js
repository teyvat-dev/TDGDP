"use strict";(self.webpackChunktdgdp_docs=self.webpackChunktdgdp_docs||[]).push([[230],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4724:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],p={sidebar_position:2},l="Make Your Own Exporter",s={unversionedId:"exporting/make-your-own",id:"exporting/make-your-own",isDocsHomePage:!1,title:"Make Your Own Exporter",description:'An exporter is the final step in the TDGDP pipeline, here the data provided from a parser can be manipulated and "exported" in the way that you want. As this is still early days, exporters and custom-exporters are experiemental. Only the base local/raw exporter currently works with every parser, as it does not manipulate the received data in any way and writes a .json file locally.',source:"@site/docs/exporting/make-your-own.md",sourceDirName:"exporting",slug:"/exporting/make-your-own",permalink:"/docs/exporting/make-your-own",editUrl:"https://github.com/teyvat-dev/TDGDP/edit/main/docs/docs/exporting/make-your-own.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Custom parser example",permalink:"/docs/parsing/custom-example"},next:{title:"Export Types",permalink:"/docs/exporting/types"}},c=[{value:"Structure",id:"structure",children:[],level:3},{value:"What an exporter should do",id:"what-an-exporter-should-do",children:[],level:3},{value:"Simple Exporter Example",id:"simple-exporter-example",children:[],level:3}],u={toc:c};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"make-your-own-exporter"},"Make Your Own Exporter"),(0,a.kt)("p",null,'An exporter is the final step in the TDGDP pipeline, here the data provided from a parser can be manipulated and "exported" in the way that you want. As this is still early days, exporters and custom-exporters are experiemental. Only the base ',(0,a.kt)("inlineCode",{parentName:"p"},"local/raw")," exporter currently works with every parser, as it does not manipulate the received data in any way and writes a ",(0,a.kt)("inlineCode",{parentName:"p"},".json")," file locally."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Requested Exporters")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Exporters that would be nice but have not been created yet are connectors to services like s3, prisma, google cloud storage, google drive etc."))),(0,a.kt)("h3",{id:"structure"},"Structure"),(0,a.kt)("p",null,"All exporters should follow a similar structure to proposed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<root>/src/exporters/<type>/<subtype>.ts\n<root>/src/exporters/<type>/utils\n")),(0,a.kt)("p",null,"This strucutre should provide enough headroom for any kind of complex exporter logic"),(0,a.kt)("h3",{id:"what-an-exporter-should-do"},"What an exporter should do"),(0,a.kt)("p",null,"An exporter should be able to do the following things"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Take data as an object from the parsers return object"),(0,a.kt)("li",{parentName:"ol"},"Ensure exporting with the desired exporter logic is possible before committing any I/O"),(0,a.kt)("li",{parentName:"ol"},"Manipulate the data into compatiable data for the desired exporting method"),(0,a.kt)("li",{parentName:"ol"},"Commit to exporting (Bonus points for implementing feedback for long running exports)")),(0,a.kt)("h3",{id:"simple-exporter-example"},"Simple Exporter Example"),(0,a.kt)("p",null,"As an example here is the raw data exporter, for now the path is determined outside this exporters scope."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { open } from 'fs/promises';\n\nimport ensureDir from '../../global/helpers/ensureDirs';\n\n/**\n * Writes the raw data to a file.\n *\n * @param data Data to write.\n * @param path Path where to write the data.\n */\nconst raw = async (data: any, path: string) => {\n  if (data) {\n    const fileName = `${path}.json`;\n    await ensureDir(path.split('/').slice(0, -1).join('/'));\n    const file = await open(fileName, 'w');\n    await file.writeFile(JSON.stringify(data, null, 0));\n    await file.close();\n  }\n};\n\nexport default raw;\n")))}d.isMDXComponent=!0}}]);